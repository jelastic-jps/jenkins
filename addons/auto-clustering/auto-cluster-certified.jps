type: update
id: jenkins-auto-cluster
baseUrl: https://raw.githubusercontent.com/jelastic-jps/jenkins/master
logo: /images/jenkins.png
name: Jenkins DevOps Pack Cluster Logic
targetNodes: none

nodeGroupAlias:
  ${settings.nodeGroup}: cp

onInstall:
  - if (${settings.cloned:false}): cleanupNodes
  - else: 
      - setupMaster
      - configureSlaves: ${nodes.slaves.join(id,)}
  - readPublicKeyFromMaster
  - set:
      key: ${response.body}
  - forEach(nodes.slaves):
      - initSlave:
          publicKey: ${this.key}
          slaveNodeId: ${@i.id}
          slaveNodeIp: ${@i.intIP}

onAfterRedeployContainer[slaves]:
  forEach(event.response.nodes):
    - cmd[${nodes.cp.master.id}]: |-
        ssh-keygen -R ${@i.intIP}
        ssh-keyscan -H ${@i.intIP} >> ~/.ssh/known_hosts

onAfterScaleOut[slaves]:
  - configureSlaves: ${event.response.nodes.join(id,)}
  - readPublicKeyFromMaster
  - set:
      key: ${response.body}
  - forEach(event.response.nodes):
      - initSlave:
          publicKey: ${this.key}
          slaveNodeId: ${@i.id}
          slaveNodeIp: ${@i.intIP}
          
onBeforeScaleIn[slaves]:
  forEach(event.response.nodes):
    removeSlave:
      slaveNodeIp: ${@i.intIP}
      
onBeforeRemoveNode [cp]:
  if (nodes.cp.length == 1):
    install:
      type: update
      name: Jenkins DevOps Pack Cluster Logic
      id: jenkins-auto-cluster
      
onAfterStart:
  - cmd[cp]: jem service start

onAfterClone:
  - script: delete MANIFEST.id; return {result:0, jps:MANIFEST};
  - install: ${response.jps}
    envName: ${event.response.env.envName}
    settings:
      nodeGroup: ${settings.nodeGroup} 
      cloned: true
      
onAfterMigrate:
  - cleanupNodes
  - readPublicKeyFromMaster
  - set:
      key: ${response.body}
  - forEach(nodes.slaves):
      - initSlave:
          publicKey: ${this.key}
          slaveNodeId: ${@i.id}
          slaveNodeIp: ${@i.intIP}

actions:
   cleanupNodes:
    cmd[cp]: |-
      xmlstarlet ed --inplace -u "jenkins.model.JenkinsLocationConfiguration/jenkinsUrl" -v "http://$(hostname)/" /var/lib/jenkins/jenkins.model.JenkinsLocationConfiguration.xml 2>/dev/null;
      rm -rf /var/lib/jenkins/nodes/*;
      echo "" > /home/jelastic/.ssh/known_hosts;
      jem service restart;
      retries=15; while [ $retries -gt 0 ]; do [[ $(curl -s -w "%{http_code}" http://localhost/ -o /dev/null) != "403" ]] || break; sleep 10; let retries=${retries}-1; done;
    user: root

   setupMaster:
    - if ('${env.ssl}' === 'false'):
        - set:
            protocol: http
    - else:
        - set:
            protocol: https
    - cmd[cp]: |-
        pswd=$(cat /var/lib/jenkins/secrets/initialAdminPassword)
        jar=/opt/jenkins/WEB-INF/jenkins-cli.jar
        jem service restart
        retries=15; while [ $retries -gt 0 ]; do [[ $(curl -s -w "%{http_code}" http://localhost/ -o /dev/null) != "403" ]] || break; sleep 10; let retries=${retries}-1; done;
        echo -e "\n"|ssh-keygen -N "" -m PEM -t rsa -b 4096
        wget ${baseUrl}/conf/credentials.xml -O credentials.xml
        xmlstarlet ed --inplace -u "com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey/privateKeySource/privateKey" -v "$(cat .ssh/id_rsa)" credentials.xml 2>/dev/null;
        cat credentials.xml | java -jar $jar -s http://localhost -auth admin:$pswd create-credentials-by-xml "SystemCredentialsProvider::SystemContextResolver::jenkins" "(global)"
        wget ${baseUrl}/conf/jenkins.model.JenkinsLocationConfiguration.xml -O /var/lib/jenkins/jenkins.model.JenkinsLocationConfiguration.xml
        chmod 644 /var/lib/jenkins/jenkins.model.JenkinsLocationConfiguration.xml 
        xmlstarlet ed --inplace -u "jenkins.model.JenkinsLocationConfiguration/adminAddress" -v "${user.email}" /var/lib/jenkins/jenkins.model.JenkinsLocationConfiguration.xml 2>/dev/null;
        xmlstarlet ed --inplace -u "jenkins.model.JenkinsLocationConfiguration/jenkinsUrl" -v "${this.protocol}://$(hostname)/" /var/lib/jenkins/jenkins.model.JenkinsLocationConfiguration.xml 2>/dev/null;
        rm -f credentials.xml
        wget ${baseUrl}/conf/user-creation.groovy
        sed -i 's/EMAIL/${user.email}/' user-creation.groovy
        cat user-creation.groovy | java -jar $jar -auth admin:$pswd -s http://localhost/ groovy =
        rm -f user-creation.groovy
        jem service restart
   
   readPublicKeyFromMaster:
    api: env.file.Read
    path: /home/jelastic/.ssh/id_rsa.pub
    nodeid: ${nodes.cp.master.id}
    
   configureSlaves:
    - cmd[${this}]: |-
        echo -e "/home/jelastic/.ssh/authorized_keys\n/etc/ssh/\n/home/jelastic/remoting\n/home/jelastic/remoting.jar" >> /etc/jelastic/redeploy.conf;
        echo PubkeyAcceptedAlgorithms=+ssh-rsa > /etc/ssh/sshd_config.d/60-pubkeyacceptedalgorithms.conf
        systemctl restart sshd
      user: root
        
   initSlave:
    - cmd[${this.slaveNodeId}]: |-
        sudo systemctl stop jvm &>/dev/null
        sudo systemctl disable jvm &>/dev/null
        echo "${this.publicKey}" >> /home/jelastic/.ssh/authorized_keys;
        echo '. /etc/profile' >> /home/jelastic/.bashrc
    - cmd[${nodes.cp.master.id}]: |-
        ssh-keygen -R ${this.slaveNodeIp}
        ssh-keyscan -H ${this.slaveNodeIp} >> ~/.ssh/known_hosts
        pswd=$(cat /var/lib/jenkins/secrets/initialAdminPassword)
        jar=/opt/jenkins/WEB-INF/jenkins-cli.jar
        wget ${baseUrl}/conf/worker.xml -O worker.xml
        xmlstarlet ed --inplace -u "slave/name" -v "node${this.slaveNodeId}" worker.xml 2>/dev/null;
        xmlstarlet ed --inplace -u "slave/launcher/host" -v "${this.slaveNodeIp}" worker.xml 2>/dev/null;
        xmlstarlet ed --inplace -u "slave/label" -v "node${this.slaveNodeId}" worker.xml 2>/dev/null;
        cat worker.xml | java -jar $jar -s http://localhost -auth admin:$pswd create-node node${this.slaveNodeId}
        rm -f worker.xml
   
   removeSlave:
    cmd[${nodes.cp.master.id}]: |-
      pswd=$(cat /var/lib/jenkins/secrets/initialAdminPassword)
      jar=/opt/jenkins/WEB-INF/jenkins-cli.jar
      cd /var/lib/jenkins/nodes
      slave_node_name=$(dirname $(grep -Rl '${this.slaveNodeIp}' *))
      java -jar $jar -s http://localhost -auth admin:$pswd delete-node ${slave_node_name}
      sed -i "/^${this.slaveNodeIp}/d" /home/jelastic/.ssh/known_hosts
